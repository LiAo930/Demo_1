创建与合并分支：
	git branch dev //创建新分支dev
	git checkout dev / git switch dev//由master主分支切换到dev分支上
		ps：这两步也可直接用 git checkout -b dev 或 git switch -c dev来代替
	
	（dev分支操作文件）

	git checkout master //切换回主分支，此时文件中的数据仍保持原样

	git merge dev //将指定分支（dev）合并至当前分支上，通常来说是fast-forward（快速合并，即把master的指针直接直指向dev，不过会有冲突出现，且没有合并痕迹，不利于团队协作）

	当分支合并出现冲突时，git会自动针对冲突文件做出修改，我们通过git status查看问题文件是谁后，再手动修改即可

	用git log --graph命令可以看到分支合并图。

	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。


	git merge --no-ff -m "new message" dev

	 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；

	$ git commit -m "update demo2"
	[dev 2a44137] update demo2
	 1 file changed, 2 insertions(+), 1 deletion(-)

	在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。


	开发是一个多人协作活动，而且也是一个不断添加功能的活动。所以每开发一个新feature，最好新建一个分支；

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

	
